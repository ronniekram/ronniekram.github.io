{"ast":null,"code":"const islandReducer = (state = {\n  islands: [],\n  loading: false\n}, action) => {\n  switch (action.type) {\n    case 'FETCH_ISLANDS':\n      return { ...state,\n        islands: [...state.islands],\n        loading: true\n      };\n\n    case 'ISLANDS_FETCHED':\n      return { ...state,\n        islands: actio\n      };\n\n    case 'ADD_ISLAND':\n      return { ...state,\n        islands: [...state.islands, action.payload]\n      };\n\n    case 'ADD_VILLAGER':\n      let islands = state.islands.map(island => {\n        if (island.id === action.payload.id) {\n          return action.payload;\n        } else {\n          return island;\n        }\n      });\n      return { ...state,\n        islands: islands\n      };\n\n    case 'DELETE_VILLAGER':\n      let islandsTwo = state.islands.map(island => {\n        if (island.id === action.payload.id) {\n          return action.payload;\n        } else {\n          return island;\n        }\n      });\n      return { ...state,\n        islands: islandsTwo\n      };\n\n    case 'DELETE_ISLAND':\n      let islandsThree = state.islands.map(island => {\n        if (island.id === action.payload.id) {\n          return action.payload;\n        } else {\n          return island;\n        }\n      });\n      return { ...state,\n        islands: islandsThree\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default islandReducer;","map":{"version":3,"sources":["/Users/HotRonnie/Desktop/ac-villagers-react/villager-front/src/reducers/IslandReducer.js"],"names":["islandReducer","state","islands","loading","action","type","actio","payload","map","island","id","islandsTwo","islandsThree"],"mappings":"AACA,MAAMA,aAAa,GAAG,CAACC,KAAK,GAAG;AAACC,EAAAA,OAAO,EAAE,EAAV;AAAcC,EAAAA,OAAO,EAAE;AAAvB,CAAT,EAAwCC,MAAxC,KAAmD;AACvE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,eAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELC,QAAAA,OAAO,EAAE,CAAC,GAAGD,KAAK,CAACC,OAAV,CAFJ;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAK,iBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELC,QAAAA,OAAO,EAAEI;AAFJ,OAAP;;AAIF,SAAK,YAAL;AACE,aAAO,EAAC,GAAGL,KAAJ;AAAWC,QAAAA,OAAO,EAAE,CAAC,GAAGD,KAAK,CAACC,OAAV,EAAmBE,MAAM,CAACG,OAA1B;AAApB,OAAP;;AACF,SAAK,cAAL;AACE,UAAIL,OAAO,GAAGD,KAAK,CAACC,OAAN,CAAcM,GAAd,CAAkBC,MAAM,IAAI;AACxC,YAAIA,MAAM,CAACC,EAAP,KAAcN,MAAM,CAACG,OAAP,CAAeG,EAAjC,EAAqC;AACnC,iBAAON,MAAM,CAACG,OAAd;AACD,SAFD,MAEO;AACL,iBAAOE,MAAP;AACD;AACF,OANa,CAAd;AAOA,aAAO,EAAC,GAAGR,KAAJ;AAAWC,QAAAA,OAAO,EAAEA;AAApB,OAAP;;AACF,SAAK,iBAAL;AACE,UAAIS,UAAU,GAAGV,KAAK,CAACC,OAAN,CAAcM,GAAd,CAAkBC,MAAM,IAAI;AAC3C,YAAIA,MAAM,CAACC,EAAP,KAAcN,MAAM,CAACG,OAAP,CAAeG,EAAjC,EAAqC;AACnC,iBAAON,MAAM,CAACG,OAAd;AACD,SAFD,MAEO;AACL,iBAAOE,MAAP;AACD;AACF,OANgB,CAAjB;AAOA,aAAO,EAAC,GAAGR,KAAJ;AAAWC,QAAAA,OAAO,EAAES;AAApB,OAAP;;AACF,SAAK,eAAL;AACE,UAAIC,YAAY,GAAGX,KAAK,CAACC,OAAN,CAAcM,GAAd,CAAkBC,MAAM,IAAI;AAC7C,YAAIA,MAAM,CAACC,EAAP,KAAcN,MAAM,CAACG,OAAP,CAAeG,EAAjC,EAAqC;AACnC,iBAAON,MAAM,CAACG,OAAd;AACD,SAFD,MAEO;AACL,iBAAOE,MAAP;AACD;AACF,OANkB,CAAnB;AAOA,aAAO,EAAC,GAAGR,KAAJ;AAAWC,QAAAA,OAAO,EAAEU;AAApB,OAAP;;AACF;AACE,aAAOX,KAAP;AA1CJ;AA4CD,CA7CD;;AA+CA,eAAeD,aAAf","sourcesContent":["\nconst islandReducer = (state = {islands: [], loading: false}, action) => {\n  switch(action.type) {\n    case 'FETCH_ISLANDS': \n      return {\n        ...state, \n        islands: [...state.islands],\n        loading: true\n      }\n    case 'ISLANDS_FETCHED':\n      return {\n        ...state,\n        islands: actio\n      }\n    case 'ADD_ISLAND':\n      return {...state, islands: [...state.islands, action.payload]}\n    case 'ADD_VILLAGER': \n      let islands = state.islands.map(island => {\n        if (island.id === action.payload.id) {\n          return action.payload\n        } else {\n          return island\n        }\n      })\n      return {...state, islands: islands}\n    case 'DELETE_VILLAGER':\n      let islandsTwo = state.islands.map(island => {\n        if (island.id === action.payload.id) {\n          return action.payload\n        } else {\n          return island\n        }\n      })\n      return {...state, islands: islandsTwo}\n    case 'DELETE_ISLAND':\n      let islandsThree = state.islands.map(island => {\n        if (island.id === action.payload.id) {\n          return action.payload\n        } else {\n          return island\n        }\n      })\n      return {...state, islands: islandsThree}\n    default: \n      return state;\n  }\n}\n\nexport default islandReducer;"]},"metadata":{},"sourceType":"module"}